#!/bin/bash

apt install openssl ssl-cert

certconfigdir="/root/SSL-Certs"
# FIXME: check whether apache2 or nginx are running
if [ -d "/etc/apache2" ]; then
    setup_apache=true
elif [ -d "/etc/nginx" ]; then
    setup_nginx=true
fi
letsencrypt_username="letsencrypt"
letsencrypt_user_home="/var/lib/$letsencrypt_username"

logfile="$(pwd)/letsencrypt-setup-log.txt"
touch $logfile
chmod 0664 $logfile

debugmode=false

FQDN="$1"
FQDNunderscores="$(echo $FQDN | sed 's/\./_/g')"

echo "---$(date)---" >> $logfile

if [ -z "$FQDNunderscores" ]; then
	echo "You didn't provide a FQDN!"
	echo "Didn't provide FQDN" >> $logfile
	exit;
fi

if [ "$EUID" -ne 0 ]; then
  echo "Please run this script as root!"
  echo "Script was run without root permissions by '$(whoami)'" >> $logfile
  exit
fi

echo "Setting up automatic letsencrypt SSL-Certification"

echo "Provided FQDN: $FQDN"
echo "Provided FQDN: $FQDN" >> $logfile

echo "Setting up Apache2: $setup_apache"
echo "Apache2: $setup_apache" >> $logfile

echo "Setting up Nginx: $setup_nginx"
echo "Nginx: $setup_nginx" >> $logfile

echo "Certification-Config directory will be created in $certconfigdir"
echo "Cert-Configs Directory: $certconfigdir" >> $logfile

echo "Setting up with user '$letsencrypt_username' with home '$letsencrypt_user_home'"
echo "User: $letsencrypt_username with home $letsencrypt_user_home" >> $logfile

# returns: 1 if already deployed and 0 if not.
function deploy_file() {
	target_file_path="$1"
	file_content_encoded="$2"
	file_content_checksum="$3"
	echo "Deploying $target_file_path"
	echo "Deploying $target_file_path" >> $logfile
	if ! [ -s "$target_file_path" ]; then
		echo "$file_content_encoded" | base64 -d - > "$target_file_path"
	else
		checksum_deployed=$(sha256sum "$target_file_path" | cut -d " " -f1)
		checksum_expected="$file_content_checksum"
		if [ "${checksum_deployed}" = "${checksum_expected}" ]; then
			echo "$target_file_path was already deployed."
			echo "$target_file_path was already deployed." >> $logfile
			return 1
		else
			echo "$target_file_path to be updated deployed."
			echo "$target_file_path to be updated deployed." >> $logfile
			echo "$file_content_encoded" | base64 -d - > "$target_file_path"
		fi
	fi
	return 0
}

param=$2
if [ -n $param ]; then
	if [ "$param" = "true" ]; then
		debugmode=true
	fi
fi

if [ "$debugmode" = true ]; then
	echo "Running in debug mode!"
fi


####################
#####INSTALLING#####
####################


### Installing Base64 ###
#echo "Installing Base64 via APT"
#apt install base64
#TODO: SEARCH BASE64 PACKET
#echo "OK"


### Making directory $certconfigdir ###
echo "Creating cert. config directory"
test -d "$certconfigdir" || mkdir -p "$certconfigdir"
echo "OK"


### Deploying web_certrequest.sh ###
deploy_file "$certconfigdir/web_certrequest.sh" "@B64:scripts/web_certrequest.sh@" "@CHECKSUM:scripts/web_certrequest.sh@"
echo "Set permission for web_certrequest.sh"
chmod 0755 "$certconfigdir/web_certrequest.sh"
echo "OK"


### Check if openssl config needs to be updated on this system ###
deploy_file "$certconfigdir/openssl::default.cnf" "@B64:data/openssl::HOST.cnf@" "@CHECKSUM:data/openssl::HOST.cnf@"
ret=$?

if [ $ret -eq 0 ]; then
	### Force deploy openssl config since openssl::default.cnf was old ###
	deploy_file "$certconfigdir/openssl::$FQDNunderscores.cnf" "@B64:data/openssl::HOST.cnf@" "always-true"

	is_opensslconfig_new=true
fi

echo "Set permission for openssl config"
chmod 0644 "$certconfigdir/openssl::$FQDNunderscores.cnf"
echo "OK"


### User is supposed to enter alternative DNS names ###
###  and cert. info (like orgaName or countryName)  ###
read | cat <<- EndOfMessage
	An editor will now open.
	Please configure the openssl config file properly.
	Don't forget to add alternative DNS names at the bottom of the file.
	Don't alter anything which is not marked by "ADAPT HERE".
	Please press enter to continue...
EndOfMessage

if [ "$is_opensslconfig_new" = true ]; then
	echo "DNS.1 = $FQDN" >> "$certconfigdir/openssl::$FQDNunderscores.cnf"
fi
editor "$certconfigdir/openssl::$FQDNunderscores.cnf"
echo "OK"


### EXECUTING web_certrequest.sh ###
echo "Executing web_certrequest.sh script..."
cdstack="$(pwd)"
cd "$certconfigdir/"
bash "$certconfigdir/web_certrequest.sh" "$FQDN"
cd "$cdstack"
echo "OK"

if [ "$debugmode" = false ]; then
	### Copy private key to /etc/ssl/private ###
	echo "Copying the private key '$certconfigdir/private/$FQDNunderscores.key' to /etc/ssl/private"
	cp "$certconfigdir/private/$FQDNunderscores.key" "/etc/ssl/private/$FQDNunderscores.key"

	echo "Set permission for private key in /etc/ssl/private"
	chmod 0640 "/etc/ssl/private/$FQDNunderscores.key"

	echo "Set ownership for private key in /etc/ssl/private"
	chown root:ssl-cert "/etc/ssl/private/$FQDNunderscores.key"
	echo "OK"
else
	echo "Skipped copying private key"
fi


### Installing acme-tiny ###
echo "Installing acme-tiny via APT"
apt install acme-tiny
echo "OK"


### Creating letsencrypt_user ###
echo "Creating user: '$letsencrypt_username'"
sudo adduser --system --home "$letsencrypt_user_home" --shell /bin/bash "$letsencrypt_username"
echo "OK"

### Make sure webuser is in ssl-cert group ###
sudo adduser www-data ssl-cert

### Creating directories in user home ###
echo "Creating new directories in user home"
test -d "$letsencrypt_user_home/bin"          || mkdir -p "$letsencrypt_user_home/bin"
test -d "$letsencrypt_user_home/challenges"   || mkdir -p "$letsencrypt_user_home/challenges"
test -d "$letsencrypt_user_home/.letsencrypt" || mkdir -p "$letsencrypt_user_home/.letsencrypt"


echo "Set permission for directories in user home"
chmod 0700 "$letsencrypt_user_home/bin"
chmod 0710 "$letsencrypt_user_home/challenges"
chmod 0700 "$letsencrypt_user_home/.letsencrypt"
chmod 0710 "$letsencrypt_user_home"

echo "Set ownership for directories in user home"
chown $letsencrypt_username:nogroup  "$letsencrypt_user_home/bin"
chown $letsencrypt_username:ssl-cert "$letsencrypt_user_home/challenges"
chown $letsencrypt_username:nogroup  "$letsencrypt_user_home/.letsencrypt"
chown $letsencrypt_username:ssl-cert "$letsencrypt_user_home"
echo "OK"


### Deploying letsencrypt-renew-certs ###
deploy_file "$letsencrypt_user_home/bin/letsencrypt-renew-certs" "@B64:scripts/letsencrypt-renew-certs_HOME@" "@CHECKSUM:scripts/letsencrypt-renew-certs_HOME@"

echo "Set permission for letsencrypt-renews-certs script"
chmod 0755 "$letsencrypt_user_home/bin/letsencrypt-renew-certs"

echo "Set ownership for letsencrypt-renews-certs script"
chown root:root  "$letsencrypt_user_home/bin/letsencrypt-renew-certs"
echo "OK"


### Creating FQDN.cnf file used by letsencrypt-renew-certs ###
echo "Creating/Overwriting the FQDN.cnf file..."
printf "$FQDNunderscores" | tr -d '\r' > "$letsencrypt_user_home/bin/FQDN.cnf"

echo "Set permission for FQDN.cnf"
chmod 0644 "$letsencrypt_user_home/bin/FQDN.cnf"
echo "OK"


### Copying $FQDNunderscores.csr from $certconfigdir into $letsencrypt_user_home/.letsencrypt ###
echo "Copying $FQDNunderscores.csr from $certconfigdir into $letsencrypt_user_home/.letsencrypt"
cp "$certconfigdir/$FQDNunderscores.csr" "$letsencrypt_user_home/.letsencrypt/$FQDNunderscores.csr"

echo "Set permission for $FQDNunderscores.csr"
chmod 0644 "$letsencrypt_user_home/.letsencrypt/$FQDNunderscores.csr"
echo "OK"


### Testing for internet connection ###
echo "Testing for internet connection..."
# We would get the same with
# 'wget -q --spider http://letsencrypt.org'
# but then we would require wget
echo -e "GET http://letsencrypt.org HTTP/1.0\n\n" | nc letsencrypt.org 80 > /dev/null 2>&1

if [ $? -eq 0 ]; then
	echo "Can connect to http://letsencrypt.org. Internet connection seems good."
else
	echo "Can't connect to http://letsencrypt.org!"
	while true; do
		read -p "Do you wish to proceed? [Yy/Nn] " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) echo "Exiting..."; exit;;
			* ) ;;
		esac
	done
fi

function delete_old_intermediate_certs() {
	file1="$letsencrypt_user_home/.letsencrypt/isrgrootx1.pem"
	if [ -r "$file1" ]; then
		echo "Detected that '$file1' is still present. Deleting it..."
		rm "$file1"
	fi

	file2="$letsencrypt_user_home/.letsencrypt/isrg-root-x1-cross-signed.pem"
	if [ -r "$file2" ]; then
		echo "Detected that '$file2' is still present. Deleting it..."
		rm "$file2"
	fi
}

### Downloading letsencrypt .pem's is not required anymore ###
### We will delete old .pem's. now ###
while true; do
	read -p "Do you wish to delete old unused intermediate certificates from letsencrypt? [Yy/Nn] " yn
	case $yn in
		[Yy]* ) delete_old_intermediate_certs; break;;
		[Nn]* ) break;;
		* ) ;;
	esac
done

### Creating new account key ###
# Testing if there is already an account file
if [ -s "$letsencrypt_user_home/.letsencrypt/account-$FQDNunderscores.key" ]; then
	echo "Detected an account-key '$letsencrypt_user_home/.letsencrypt/account-$FQDNunderscores.key'!"
else
	echo "Didn't detect an account-key"
	echo "Creating a new account-key"
	echo "Creating account-key '$letsencrypt_user_home/.letsencrypt/account-$FQDNunderscores.key'" >> $logfile
	sudo su letsencrypt -c "openssl genrsa 4096 > $letsencrypt_user_home/.letsencrypt/account-$FQDNunderscores.key"

	echo "Set permission for account key"
	chmod 0600 "$letsencrypt_user_home/.letsencrypt/account-$FQDNunderscores.key"

	echo "Set ownership for account key"
	chown letsencrypt:root "$letsencrypt_user_home/.letsencrypt/account-$FQDNunderscores.key"
fi
echo "OK"


### Installing letsencrypt-renew-certs command ###
echo "Installing 'letsencrypt-renew-certs' command"
commandfile="/usr/local/sbin/letsencrypt-renew-certs"
deploy_file "$commandfile" "@B64:scripts/letsencrypt-renew-certs_SBIN@" "@CHECKSUM:scripts/letsencrypt-renew-certs_SBIN@"

echo "Making it executable"
chmod 0700 $commandfile
echo "OK"


#todo: cronjob
if [ "$setup_apache" == "true" ]; then

	##################
	### SETTING UP ###
	### APACHE 2   ###
	##################

	apache_acme_conf="/etc/apache2/conf-available/acme-tiny.conf"

	### Deploying $apache_acme_conf ###
	deploy_file "$apache_acme_conf" "@B64:data/apache_acme-tiny.conf@" "@CHECKSUM:data/apache_acme-tiny.conf@"

	### Enabling $apache_acme_conf ###
	echo "Enabling '$apache_acme_conf'..."
	sudo a2enconf acme-tiny
	echo "OK"


	### Restarting Apache2 ###
	echo "Restarting Apache2..."
	sudo invoke-rc.d apache2 restart
	if [ $? -eq 0 ]; then
		echo "OK"
	else
		echo "NOT OK! Restarting Apache2 failed..."
		echo "Make sure that apache2 is configured such" \
			 "that challenges can be reached from the outside."
		echo "Restarting apache2 failed" >> $logfile
		exit 1
	fi

	### EXECUTING letsencrypt-renew-script ###
	echo "Executing letsencrypt-renew-certs script!"
	echo "Executing letsencrypt-renew-certs script" >> $logfile
	sudo letsencrypt-renew-certs
	echo "OK"


	### Symlink cert ###
	sudo ln -s "$letsencrypt_user_home/.letsencrypt/$FQDNunderscores.fullchain.crt" "/etc/ssl/certs/$FQDNunderscores.fullchain.crt" > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "Symlinked .crt to '/etc/ssl/certs/$FQDNunderscores.fullchain.crt'"
	else
		echo "NOT OK! But Symlink was problably just already there..."
	fi

	if [ -x "$commandfile" ]; then
		echo "invoke-rc.d apache2 restart" >> $commandfile
	fi


	### Enabling the SSL module ###
	echo "Enabling the SSL module..."
	sudo a2enmod ssl
	echo "OK"


	### Restarting Apache2 ###
	echo "Restarting Apache2..."
	sudo invoke-rc.d apache2 restart
	echo "OK"

	echo "-------------------"
	echo "Script Finished!"
	echo "Please adjust your apache ssl site configuration to:"
	echo "-------------------"
	echo "SSLCertificateFile      /etc/ssl/certs/$FQDNunderscores.fullchain.crt"
	echo "SSLCertificateKeyFile   /etc/ssl/private/$FQDNunderscores.key"
	echo ""
	echo "If you want your users to be always redirected to https then put the following into your *HTTP* site configuration:"
	echo ""
	echo "RewriteEngine on"
	echo "RewriteCond %{REQUEST_URI} !/\.well-known/acme-challenge/.*"
	echo "RewriteRule /(.*) https://$FQDN/\$1 [L,NC,NE]"
	echo ""
	echo "And don't forget to enable the rewrite module."
	echo "a2enmod rewrite"
	echo "-----THANK YOU-----"

elif [ "$setup_nginx" == "true" ]; then

	##################
	### SETTING UP ###
	###  NGINX     ###
	##################

	nginx_acme_conf="/etc/nginx/snippets/acme-tiny.conf"

	### Deploying $nginx_acme_conf ###
	touch $nginx_acme_conf
	deploy_file "$nginx_acme_conf" "@B64:data/nginx_acme-tiny.conf@" "@CHECKSUM:data/nginx_acme-tiny.conf@"

	### Enabling $apache_acme_conf ###

	echo "Enabling '$nginx_acme_conf' for default website..."
	if ! grep -q "snippets/acme-tiny.conf" /etc/nginx/sites-available/default; then
		sed -r -i /etc/nginx/sites-available/default -e "/\s+root\ \/var\/www\/html;/a \\\n\ \ \ \ \ \ \ \ \# Provide /.well-known/acme-challenge location\n\ \ \ \ \ \ \ \ include snippets/acme-tiny.conf;"
	fi

	### Restarting Nginx ###
	echo "Restarting Nginx..."
	sudo invoke-rc.d nginx restart
	if [ $? -eq 0 ]; then
		echo "OK"
	else
		echo "NOT OK! Restarting Nginx failed..."
		echo "Restarting Nginx failed" >> $logfile
		echo "Make sure that Nginx is configured such" \
			 "that challenges can be reached from the outside."
		exit 1
	fi

	### EXECUTING letsencrypt-renew-script ###
	echo "Executing letsencrypt-renew-certs script!"
	echo "Executing letsencrypt-renew-certs script" >> $logfile
	sudo letsencrypt-renew-certs
	echo "OK"

	### Symlink cert ###
	sudo ln -s "$letsencrypt_user_home/.letsencrypt/$FQDNunderscores.fullchain.crt" "/etc/ssl/certs/$FQDNunderscores.fullchain.crt" > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "Symlinked .crt to '/etc/ssl/certs/$FQDNunderscores.fullchain.crt'"
	else
		echo "NOT OK! But Symlink was problably just already there..."
	fi

	if [ -x "$commandfile" ]; then
		echo "invoke-rc.d nginx restart" >> $commandfile
	fi

	### Restarting Nginx ###
	echo "Restarting Nginx..."
	sudo invoke-rc.d nginx restart
	echo "OK"

	echo "-------------------"
	echo "Script Finished!"
	echo "Please adjust your nginx ssl site configuration to:"
	echo "-------------------"
	cat << EOF
## Redirects all HTTP traffic to the HTTPS host
server {

  listen 0.0.0.0:80;
  listen [::]:80 ipv6only=on;

  server_name ${FQDN};
  server_tokens off; ## Don't show the nginx version number, a security best practice

  location / {
    rewrite     ^   https://\$host\$request_uri? permanent;
  }

  # handle Letsencrypt renewals without redirecting to https://
  include snippets/acme-tiny.conf;

  access_log  /var/log/nginx/${FQDN}_access.log;
  error_log   /var/log/nginx/${FQDN}_error.log;
}

server {
    listen 0.0.0.0:443 ssl;
    listen [::]:443 ipv6only=on ssl;

    ## Strong SSL Security
    ## https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html & https://cipherli.st/
    ssl on;
    ssl_certificate /etc/ssl/certs/${FQDNunderscores}.fullchain.crt;
    ssl_certificate_key /etc/ssl/private/${FQDNunderscores}.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    # replace 'localhost' with your fqdn if you want to use zammad from remote
    server_name ${FQDN};

    # security - prevent information disclosure about server version
    server_tokens off;

    access_log  /var/log/nginx/${FQDN}_access.log;
    error_log   /var/log/nginx/${FQDN}_error.log;

    # YOUR SITE CONFIGURATION COMES BELOW HERE

    # ...

}
EOF
	echo "-----THANK YOU-----"

else

	echo "Didn't configure neither apache2 nor nginx."
	echo "Script has finished!"
	exit 0;

fi
